include:
  - template: Security/SAST.gitlab-ci.yml 
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - frontend-artifact
  - build
  - release
  - test
  - notification
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

make-artifacts:
  stage: frontend-artifact
  script:
    - echo ${CI_PROJECT_DIR}
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
    - cd frontend
    - npm install
    - npm run build
    - cd ..
    - mkdir sausage-store-${VERSION}
    - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт

build-frontend:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    # переменные CI_REGISTRY_USER, CI_REGISTRY_PASSWORD, CI_REGISTRY генерятся Гитлабом, их задавать не надо
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
  dependencies:
    - make-artifacts

upload-frontend-latest:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: release
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA
    # если образ прошел проверки в CI (сканирование, тесты и т.д), то тегаем latest
    - docker tag $CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/sausage-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/sausage-frontend:latest
  dependencies:
    - make-artifacts

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  # если хотим сделать деплой по кнопке
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: manual
    - if: '$CI_COMMIT_BRANCH == "docker-test"'
      when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ${DEV_USER}@${DEV_HOST} "export "VERSION=${VERSION}"; /bin/bash -s " < ./frontend/frontend-deploy.sh 
  dependencies:
    - make-artifacts

spotbugs-sast:
  variables:
    SAST_EXCLUDED_ANALYZERS: "spotbugs"

sonarqube-frontend-sast: #SonarQube frontend SAST test
  stage: test
  image: sonarsource/sonar-scanner-cli
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND_KEY}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
  dependencies:
    - make-artifacts
# build:
#   stage: build
#   script:
#     - echo ${CI_PROJECT_DIR}
#     - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
#     - cd frontend
#     - npm install
#     - npm run build
#     - cd ..
#     - mkdir sausage-store-${VERSION}
#     - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
#   artifacts:
#     paths:
#       - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт
#     reports:
#       dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт
#   rules:
#     - changes:
#         - frontend/*

# release:
#   stage: release
#   script:
#     - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
#     - curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}/sausage-store-dvorov-ivan-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz
#   rules:
#     - changes:
#         - frontend/*




# deploy:
#   when: manual
#   stage: deploy
#   before_script:
#     #устанавливаем ssh-agent для удобства аутентификации по ssh
#     - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
#     - eval $(ssh-agent -s)
#     #сохраняем сгенеренный ранее приватный ключ для раннера
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 600 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - scp ./frontend/sausage-store-frontend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-frontend.service
#     - ssh ${DEV_USER}@${DEV_HOST} 'export CURRENT_VERSION="'$VERSION'"; export VERSION="'$VERSION'"; export DEV_HOST='"'$DEV_HOST'"'; export DEV_USER="'$DEV_USER'"; export NEXUS_REPO_URL="'$NEXUS_REPO_URL'"; export NEXUS_REPO_PASS="'$NEXUS_REPO_PASS'"; export NEXUS_REPO_USER="'$NEXUS_REPO_USER'";setsid /bin/bash -s ' < ./frontend/frontend-deploy.sh
  environment:
    name: production
send-notification:
  stage: notification
  script:
    - > # Send Slack POST
      curl -X POST -H "Content-type: application/json" --data '{"text":"Вышла новая версия сосисочной - `'"$VERSION"'`. Скачать фронт можно по ссылке - <https://nexus.praktikum-services.ru/repository/sausage-store-dvorov-ivan-frontend/sausage-store/'"$VERSION"'/sausage-store-'"$VERSION"'.tar.gz|sausage-store-'"$VERSION"'.tar.gz>. :conga_parrot:"}' https://hooks.slack.com/services/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
