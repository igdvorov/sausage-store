stages:
  # - build
  # - release
  # - test
  - module-piplines
  # - notification
# variables: #add VERSION var
#   VERSION: 1.0.${CI_PIPELINE_ID}
# include:
#   - template: Security/SAST.gitlab-ci.yml 

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend #depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: #как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend 
  only:
    changes:  #как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/* 

# build-code-job:  # задача с именем build-code-job
#   stage: build   # этап build
#   script:        # объявление скрипта
#     - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
#     - cd backend 
#     - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
#     - cd ../frontend 
#     - npm install # загрузка всех сторонних зависимостей
#     - npm run build # запуск сборки кода
#     - cd .. 
#     - mkdir sausage-store-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
#     - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
#     - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST 
#       - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт
#       - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
#     reports:
#       dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт
      

# spotbugs-sast: # Запрещаем повторную компиляцию и указываем, где брать зависимости
#   variables:
#     COMPILE: "false"
#     MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

# sonarqube-backend-sast: #SonarQube backend SAST test
#   stage: test
#   image: maven:3.8-openjdk-16
#   script:
#     - cd backend
#     - >
#       mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_BACKEND_KEY}
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${SONAR_LOGIN}
#       -Dsonar.projectName=04_IVANDVOROV_BACKEND

# sonarqube-frontend-sast: #SonarQube frontend SAST test
#   stage: test
#   image: sonarsource/sonar-scanner-cli
#   script:
#     - cd frontend
#     - >
#       sonar-scanner -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND_KEY}
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${SONAR_LOGIN}


# upload-release: # задача с именем upload-release
#   stage: release # этап release
#   # only: # запуск этого шага только при изменениях в директориях backend и frontend
#   #   changes:
#   #   - backend//*
#   #   - frontend//*
#   script: 
#     - echo "Get artifact from job ${ARTIFACT_JOB_ID}" 
#     - > # скачивание артефакта в файл sausage-store.zip
#       curl --location --output sausage-store-${VERSION}.zip -H "PRIVATE-TOKEN: ${MY_TOKEN}" 
#       "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts"
#     - > # сохранение артефакта в package registry
#       curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" 
#       -T sausage-store-${VERSION}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/"

# nexus-upload-backend: # Nexus backend
#   stage: release
#   script:
#     - cd backend
#     - mvn -s settings.xml deploy -DskipTests

# nexus-upload-frontend: # Nexus frontend
#   stage: release
#   script:
#     - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
#     - >
#       curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}sausage-store-dvorov-ivan-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

# send-notification:
#   stage: notification
#   script:
#     - > # Send Slack POST
#       curl -X POST -H "Content-type: application/json" --data '{"text":"Вышла новая версия сосисочной - `'"$VERSION"'`. Скачать фронт можно по - <https://nexus.praktikum-services.ru/repository/sausage-store-dvorov-ivan-frontend/sausage-store/'"$VERSION"'/sausage-store-'"$VERSION"'.tar.gz|ссылке>. Скачать бэкенд можно по - <https://nexus.praktikum-services.ru/repository/sausage-store-dvorov-ivan-backend/com/yandex/practicum/devops/sausage-store/'"$VERSION"'/sausage-store-'"$VERSION"'.jar|ссылке>. :parrot-party:"}' https://hooks.slack.com/services/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
