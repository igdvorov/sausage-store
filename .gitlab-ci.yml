include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'

stages:
  - module-pipelines
  - deploy

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend #depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: #как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend 
  only:
    changes:  #как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/* 

backend-report:
  stage: module-pipelines
  trigger:
    include:
      - "/backend-report/.gitlab-ci.yml"
    strategy: depend 
  only:
    changes:  #как только происходит изменение в папке backend-report, запускается дочерний пайплайн, который лежит в этой папке
      - backend-report/**/* 

# docker-deploy-with-context: #Bonus-part
#   stage: deploy
#   image: docker:20.10.12-dind
#   before_script:
#     - apk add openssh-client bash
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#     - echo $CI_REGISTRY_USER $CI_REGISTRY_PASSWORD CI_REGISTRY
#     - until docker info; do sleep 1; done
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#   script:
#     - apk add docker-compose
#     - docker context create my-vm --docker host=ssh://${DEV_USER}@${DEV_HOST}
#     - docker-compose --context my-vm pull sausage-backend-reports sausage-backend sausage-frontend
#     - docker-compose --context my-vm down || true
#     - docker-compose --context my-vm stop sausage-backend || true
#     - docker-compose --context my-vm rm -f sausage-backend || true
#     - docker-compose --context my-vm stop sausage-backend-report || true
#     - docker-compose --context my-vm rm -f sausage-backend-report || true
#     - docker-compose --context my-vm stop sausage-frontend || true
#     - docker-compose --context my-vm rm -f sausage-frontend || true
#     - docker-compose --context my-vm up -d

docker-compose-deploy:
  stage: deploy
  image: alpine:3.15.0
  when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yaml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yaml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "APPLICATION_NAME=${APPLICATION_NAME}";
      export "PSQL_PASSWORD=${PSQL_PASSWORD}";
      export "PSQL_USER=${PSQL_USER}";
      export "PSQL_HOST=${PSQL_HOST}";
      export "MONGO_DATA=${MONGO_DATA}";
      export "VAULT_HOST=${VAULT_HOST}";
      export "VAULT_PORT=${VAULT_PORT}";
      export "VAULT_TOKEN=${VAULT_TOKEN}";
      /bin/bash -s " < ./blue-green-deploy.sh


# build-code-job:  # задача с именем build-code-job
#   stage: build   # этап build
#   script:        # объявление скрипта
#     - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта  
#     - cd backend 
#     - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
#     - cd ../frontend 
#     - npm install # загрузка всех сторонних зависимостей
#     - npm run build # запуск сборки кода
#     - cd .. 
#     - mkdir sausage-store-${VERSION}  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
#     - mv backend/target/sausage-store-${VERSION}.jar sausage-store-${VERSION}/sausage-store-${VERSION}.jar # копирование собранного бэкенда
#     - mv frontend/dist/frontend sausage-store-${VERSION}/public_html # копирование собранного фронтэнда
#   artifacts:
#     paths:
#       - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST 
#       - sausage-store-${VERSION}/public_html  # сохранение собранного фронтэнда как артефакт
#       - sausage-store-${VERSION}/sausage-store-${VERSION}.jar # сохранение собранного бэкенда как артефакт
#     reports:
#       dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт
      

# spotbugs-sast: # Запрещаем повторную компиляцию и указываем, где брать зависимости
#   variables:
#     COMPILE: "false"
#     MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository

# sonarqube-backend-sast: #SonarQube backend SAST test
#   stage: test
#   image: maven:3.8-openjdk-16
#   script:
#     - cd backend
#     - >
#       mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_BACKEND_KEY}
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${SONAR_LOGIN}
#       -Dsonar.projectName=04_IVANDVOROV_BACKEND

# sonarqube-frontend-sast: #SonarQube frontend SAST test
#   stage: test
#   image: sonarsource/sonar-scanner-cli
#   script:
#     - cd frontend
#     - >
#       sonar-scanner -Dsonar.qualitygate.wait=true
#       -Dsonar.projectKey=${SONAR_PROJECT_FRONTEND_KEY}
#       -Dsonar.host.url=${SONARQUBE_URL}
#       -Dsonar.login=${SONAR_LOGIN}


# upload-release: # задача с именем upload-release
#   stage: release # этап release
#   # only: # запуск этого шага только при изменениях в директориях backend и frontend
#   #   changes:
#   #   - backend//*
#   #   - frontend//*
#   script: 
#     - echo "Get artifact from job ${ARTIFACT_JOB_ID}" 
#     - > # скачивание артефакта в файл sausage-store.zip
#       curl --location --output sausage-store-${VERSION}.zip -H "PRIVATE-TOKEN: ${MY_TOKEN}" 
#       "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts"
#     - > # сохранение артефакта в package registry
#       curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}" 
#       -T sausage-store-${VERSION}.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/"

# nexus-upload-backend: # Nexus backend
#   stage: release
#   script:
#     - cd backend
#     - mvn -s settings.xml deploy -DskipTests

# nexus-upload-frontend: # Nexus frontend
#   stage: release
#   script:
#     - tar czvf sausage-store-${VERSION}.tar.gz sausage-store-${VERSION}
#     - >
#       curl -v -u "${NEXUS_REPO_USER}:${NEXUS_REPO_PASS}" --upload-file sausage-store-${VERSION}.tar.gz ${NEXUS_REPO_URL}sausage-store-dvorov-ivan-frontend/sausage-store/${VERSION}/sausage-store-${VERSION}.tar.gz

# send-notification:
#   stage: notification
#   script:
#     - > # Send Slack POST
#       curl -X POST -H "Content-type: application/json" --data '{"text":"Вышла новая версия сосисочной - `'"$VERSION"'`. Скачать фронт можно по - <https://nexus.praktikum-services.ru/repository/sausage-store-dvorov-ivan-frontend/sausage-store/'"$VERSION"'/sausage-store-'"$VERSION"'.tar.gz|ссылке>. Скачать бэкенд можно по - <https://nexus.praktikum-services.ru/repository/sausage-store-dvorov-ivan-backend/com/yandex/practicum/devops/sausage-store/'"$VERSION"'/sausage-store-'"$VERSION"'.jar|ссылке>. :parrot-party:"}' https://hooks.slack.com/services/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
